{"version":3,"sources":["services/persons.js","index.js"],"names":["baseUrl","console","log","axios","get","newObject","post","id","delete","put","Person","personObj","removeP","name","number","onClick","Notification","message","style","includes","color","background","fontStyle","fontSize","Filter","filterValue","onFilterTextChange","value","onChange","Form","submitFunc","changeName","changeNumber","onSubmit","type","Persons","persons","removePerson","map","person","key","App","useState","setPersons","newName","setNewName","filterText","setFilterText","newNumber","setNewNumber","successMessage","setSuccessMessage","errorMessage","setErrorMessage","useEffect","personService","then","response","data","filteredPersons","filter","toLowerCase","indexOf","event","target","preventDefault","existingPerson","find","p","updatedPerson","setTimeout","personObject","concat","catch","error","window","confirm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1bf43c16.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    console.log('localhostlocalhostlocalhostlocalhost', baseUrl)\n    return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n    return axios.post(baseUrl, newObject)\n}\n\nconst deletePerson = (id) => {\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nconst update = (id, newObject) => {\n    return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nexport default { getAll, create, deletePerson, update }","import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\nimport personService from './services/persons'\n\nconst Person = ({ personObj, removeP }) => {\n  return (\n    <div>\n      {personObj.name} {personObj.number}\n      <button onClick={() => removeP(personObj)}>Delete</button>\n    </div>\n  )\n}\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n  const successMessage = {\n    color: 'white',\n    background: 'green',\n    fontStyle: 'italic',\n    fontSize: 20\n  }\n  const errorMessage = {\n    color: 'white',\n    background: 'red',\n    fontStyle: 'italic',\n    fontSize: 40\n  }\n  return (\n    <div style={message.includes('error') ? errorMessage : successMessage}>\n      <p>{message}</p>\n    </div>\n  )\n}\n\nconst Filter = ({ filterValue, onFilterTextChange }) => {\n  return (\n    <form>\n      <div>\n        Filter:\n          <input\n          value={filterValue}\n          onChange={onFilterTextChange} />\n      </div>\n    </form>\n  )\n}\n\nconst Form = ({ submitFunc, name, changeName, number, changeNumber }) => {\n  return (\n    <form onSubmit={submitFunc}>\n      <h2>Add New</h2>\n      <div>\n        Name:\n          <input\n          value={name}\n          onChange={changeName} />\n      </div>\n      <div>\n        Number:\n          <input\n          value={number}\n          onChange={changeNumber} />\n      </div>\n      <div>\n        <button type=\"submit\">Add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Persons = ({ persons, removePerson }) => {\n  return (\n    <div>\n      <h2>Numbers</h2>\n      {persons.map(person =>\n        <Person personObj={person} key={person.id} removeP={removePerson} />\n      )}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [filterText, setFilterText] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [successMessage, setSuccessMessage] = useState('')\n  const [errorMessage, setErrorMessage] = useState('')\n\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(response => {\n        setPersons(response.data)\n      })\n  }, [])\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const existingPerson = persons.find(p => p.name === newName)\n    if (existingPerson) {\n      const updatedPerson = { ...existingPerson, number: newNumber }\n      personService\n        .update(existingPerson.id, updatedPerson)\n        .then(response => {\n          setPersons(persons.map(person => person.id !== existingPerson.id ? person : response.data));\n          setSuccessMessage(`${updatedPerson.name}s number updated`);\n          setTimeout(() => {\n            setSuccessMessage(null)\n          }, 3000);\n        })\n    } else {\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n      personService\n        .create(personObject)\n        .then(response => {\n          setPersons(persons.concat(response.data));\n          setSuccessMessage(`${personObject.name} is added`);\n          setTimeout(() => {\n            setSuccessMessage(null)\n          }, 3000);\n          return response;\n        })\n        .catch (\n          error => {\n            setErrorMessage(`error: ${error.response.data.error}`)\n            console.log(error.response.data.error)\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 3000);\n          }\n        )\n    }\n    setNewName('');\n    setNewNumber('');\n  }\n\n  const deletePerson = ({name, id}) => {\n    if (window.confirm(`Do you really want to delete ${name}?`)) {\n      personService.deletePerson(id).then(() => {\n        setPersons(persons.filter(person => person.id !== id));\n      }).catch (\n        error => {\n          setErrorMessage(`error deleting user ${name}`)\n          console.log(error.response.data.error)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 3000);\n        }\n      )\n    }\n  }\n\n  const filteredPersons = persons.filter(person => person.name.toLowerCase().indexOf(filterText) > -1)\n\n  const handleFilterTextChange = (event) => {\n    setFilterText(event.target.value)\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={successMessage || errorMessage} />\n      <Filter filterValue={filterText} onFilterTextChange={handleFilterTextChange} />\n      <Form submitFunc={addPerson} name={newName} changeName={handleNameChange} number={newNumber} changeNumber={handleNumberChange} />\n      <Persons persons={filteredPersons} removePerson={deletePerson} />\n    </div>\n  )\n}\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}